buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

plugins {
    id 'java' // so that we can use 'implementation', 'testImplementation' for dependencies
    id 'maven-publish'
    id 'signing'
}

apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    jcenter()
    mavenCentral()
    maven {
        url = "https://packages.confluent.io/maven"
    }
    maven {
        url = "https://jitpack.io"
    }
}

group = 'io.github.ferozed.kafka.connect'
version = '0.1-SNAPSHOT'

dependencies {

    // Kafka
    compileOnly group: 'org.apache.kafka', name: 'connect-api', version: '3.3.1'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.1'
    implementation 'com.github.jcustenborder.kafka.connect:connect-utils:0.7.173'
    implementation 'com.github.jcustenborder.kafka.connect:kafka-connect-transform-common:0.1.0.14'

    //test
    testImplementation(platform('org.junit:junit-bom:5.9.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation group: 'org.apache.kafka', name: 'connect-api', version: '3.3.1'
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }

        resources {
            srcDirs = ["src/main/avro", "src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}


task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

plugins.withId("com.github.johnrengelman.shadow"){

    //this block requires the java plugin to be applied first.
    plugins.withId("java"){

        shadowJar {
            //We are overriding the default jar to be the shadow jar
            classifier = "shadow"
            exclude 'META-INF'
            exclude 'META-INF/*.INF'
            exclude 'META-INF/license/*'
            exclude 'org/apache/*'

            dependencies {
                exclude(dependency('org.apache.kafka:connect-api:3.3.1'))
                exclude(dependency('org.apache.kafka:kafka-clients:3.3.1'))
            }
        }

        jar {
            manifest {
                attributes(
                        'Built-By'       : System.properties['user.name'],
                        'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                        'Created-By'     : "Gradle ${gradle.gradleVersion}",
                        'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                        'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
                )
            }
        }

        tasks.build.dependsOn tasks.shadowJar

        task relocateShadowJar(type: ConfigureShadowRelocation) {
            target = tasks.shadowJar
            prefix = "myapp" // Default value is "shadow"

        }

        tasks.shadowJar.dependsOn tasks.relocateShadowJar

        tasks.shadowJar.mustRunAfter tasks.jar
        tasks.shadowJar.mustRunAfter tasks.javadocJar
        tasks.shadowJar.mustRunAfter tasks.sourcesJar

    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Mask Json Field Transform'
                description = 'A kafka connect transform to remove the value of a sensitive field in a json document.'
                url = 'https://github.com/ferozed/mask-json-field-transform'
                properties = [
                        myProp: "value",
                        "prop.with.dots": "anotherValue"
                ]
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'ferozes'
                        name = 'Feroze Daud'
                        email = 'ferozed.oss@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:ferozed/mask-json-field-transform.git'
                    developerConnection = 'scm:git:git@github.com:ferozed/mask-json-field-transform.git'
                    url = 'https://github.com/ferozed/mask-json-field-transform'
                }
            }
        }
    }


    repositories {
        maven {
            name = "OSSRH"
            def release_url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshot_url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshot_url : release_url
            credentials {
                username = project.ossrhUsername
                password = project.ossrhPassword
            }
        }
    }
}

signing {
    //sign configurations.archives
    sign publishing.publications.mavenJava
}

//tasks.signArchives.dependsOn tasks.shadowJar

artifacts {
    archives javadocJar, sourcesJar
}
